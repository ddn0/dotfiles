#!/bin/bash

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return ;;
esac

case `uname` in
  Darwin*)
    export CLICOLOR=1 ;;
esac

if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi

# No duplicates!
export HISTSIZE=4096
export HISTCONTROL=erasedups
export HISTIGNORE=ls:cd

export VISUAL=vim
export EDITOR=$VISUAL

export USE_GKE_GCLOUD_AUTH_PLUGIN=True

export PYTHONDONTWRITEBYTECODE=1

export FZF_DEFAULT_COMMAND="rg --files"
export FZF_CTRL_T_COMMAND="rg --files"

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize

function reloadssh() {
  eval "$(tmux show-env -s |grep '^SSH_')"
}

if [ -x /usr/bin/tput ] && tput setaf 1 >& /dev/null; then
  export PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
else
  export PS1='\u@\h:\W\$ '
fi

[ -f ~/.fzf.bash ] && . ~/.fzf.bash
[ -f ~/.cargo/env ] && . ~/.cargo/env
[ -f /usr/local/share/google-cloud-sdk/path.bash.inc ] && . /usr/local/share/google-cloud-sdk/path.bash.inc

# subshells interfere with vim-tmux-navigator:
#
#   https://github.com/christoomey/vim-tmux-navigator/issues/195
#
# Since supporting arbitrary subshell nested is broken, provide an alias to
# avoid creating a subshell for virtual environments instead
if which poetry > /dev/null; then
  alias poetry_activate='source $(poetry env info --path)/bin/activate'
fi

# On some machines (Ubuntu 18.04), non-login interactive shells do not load
# bash completions. Load them if not.
if [ -z "${BASH_COMPLETION_VERSINFO-}" ]; then
  if ! shopt -oq posix; then
    for candidate in /usr/share/bash-completion/bash_completion /usr/local/etc/bash_completion /etc/bash_completion; do
      if [ -f "$candidate" ]; then
        . "$candidate"
        break
      fi
    done
  fi
fi

###-begin-gt-completions-###
#
# yargs command completion script
#
# Installation: gt completion >> ~/.bashrc
#    or gt completion >> ~/.bash_profile on OSX.
#
_gt_yargs_completions()
{
    local cur_word args type_list

    cur_word="${COMP_WORDS[COMP_CWORD]}"
    args=("${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$(gt --get-yargs-completions "${args[@]}")

    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ ${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _gt_yargs_completions gt
###-end-gt-completions-###

_check_completion() {
    local IFS=$'\n'
    local response

    response=$(env COMP_WORDS="${COMP_WORDS[*]}" COMP_CWORD=$COMP_CWORD _CHECK_COMPLETE=bash_complete $1)

    for completion in $response; do
        IFS=',' read type value <<< "$completion"

        if [[ $type == 'dir' ]]; then
            COMPREPLY=()
            compopt -o dirnames
        elif [[ $type == 'file' ]]; then
            COMPREPLY=()
            compopt -o default
        elif [[ $type == 'plain' ]]; then
            COMPREPLY+=($value)
        fi
    done

    return 0
}
complete -o nosort -F _check_completion check

